Index: Password_manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\nfrom tkinter import simpledialog, messagebox, font\nfrom cryptography.fernet import Fernet\nimport os\n\n# Master password (for demo purposes, use a secure method in real applications)\nMASTER_PASSWORD = \"lessismore\"\n\ndef verify_master_password():\n    entered_password = simpledialog.askstring(\"Master Password\", \"Enter the master password:\", show='*')\n    if entered_password == MASTER_PASSWORD:\n        messagebox.showinfo(\"Access\", \"Access is granted\")\n        return True\n    else:\n        messagebox.showerror(\"Access Denied\", \"Incorrect master password. Access denied.\")\n        return False\n\n# Function to prompt for master password\ndef prompt_master_password():\n    if not verify_master_password():\n        root.destroy()\n\n# Function definitions for your password manager\n\ndef write_key():\n    key = Fernet.generate_key()\n    with open(\"key.key\", \"wb\") as key_file:\n        key_file.write(key)\n\ndef load_key():\n    if not os.path.exists(\"key.key\"):\n        write_key()\n    with open(\"key.key\", \"rb\") as key_file:\n        key = key_file.read()\n    return key\n\nkey = load_key()\nfer = Fernet(key)\n\ndef add_entry(account, password):\n    with open('passwords.txt', 'a') as f:\n        f.write(account + \"|\" + fer.encrypt(password.encode()).decode() + \"\\n\")\n\ndef view_entries():\n    entries_list = []\n    try:\n        with open('passwords.txt', 'r') as f:\n            for line in f.readlines():\n                if \"|\" in line:  # Check if the line contains the separator\n                    entries_list.append(line.rstrip())\n                else:\n                    print(f\"Skipping malformed line: {line}\")\n        return entries_list\n    except FileNotFoundError:\n        print(\"No passwords stored yet.\")\n        return []\n\n# Tkinter functions\n\ndef add_password():\n    account = simpledialog.askstring(\"Account\", \"Enter the account name\")\n    password = simpledialog.askstring(\"Password\", \"Enter the password\", show='*')\n    add_entry(account, password)\n    tk.messagebox.showinfo(\"Info\", \"Password added successfully!\")\n\ndef view_passwords():\n    entries = view_entries()\n    text.delete('1.0', tk.END)  # Clear the text area\n    for entry in entries:\n        user, passw_encrypted = entry.split(\"|\")\n        try:\n            passw = fer.decrypt(passw_encrypted.encode()).decode()\n            text.insert(tk.END, \"User: \" + user + \" | Password: \" + passw + \"\\n\")\n        except Exception as e:\n            text.insert(tk.END, f\"Error decrypting password for {user}: {str(e)}\\n\")\n\n# Main Window\nroot = tk.Tk()\nroot.title(\"Password Manager\")\nroot.configure(bg='black')\n\n# Hacker-style font\nhacker_font = font.Font(family=\"Courier\", size=12)\n\n# Add password button\nadd_button = tk.Button(root, text=\"Add New Password\", command=add_password, font=hacker_font, fg='green', bg='black')\nadd_button.pack()\n\n# View passwords button\nview_button = tk.Button(root, text=\"View Passwords\", command=view_passwords, font=hacker_font, fg='green', bg='black')\nview_button.pack()\n\n# Text area for viewing passwords\ntext = tk.Text(root, height=20, width=100, font=hacker_font, fg='green', bg='black')\ntext.pack()\n\n# Prompt for master password on startup\nroot.after(100, prompt_master_password)\n\n# Start the GUI event loop\nroot.mainloop()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Password_manager.py b/Password_manager.py
--- a/Password_manager.py	(revision 0d242b270bf472706c373bdf92b89d376aaf5a8c)
+++ b/Password_manager.py	(date 1708565402560)
@@ -2,10 +2,24 @@
 from tkinter import simpledialog, messagebox, font
 from cryptography.fernet import Fernet
 import os
+from PIL import Image, ImageTk
 
 # Master password (for demo purposes, use a secure method in real applications)
 MASTER_PASSWORD = "lessismore"
 
+
+def resize_bg_image(event):
+    # Open the image file (this should be the original size image)
+    img = Image.open("/Users/sergeyakhmerov/Downloads/background.png")
+    # Resize the image to match the canvas size
+    resized_img = img.resize((event.width, event.height), Image.ANTIALIAS)
+
+    # Update the background image
+    global bg_image
+    bg_image = ImageTk.PhotoImage(resized_img)
+    canvas.itemconfig(bg_img_id, image=bg_image)
+
+
 def verify_master_password():
     entered_password = simpledialog.askstring("Master Password", "Enter the master password:", show='*')
     if entered_password == MASTER_PASSWORD:
@@ -15,11 +29,13 @@
         messagebox.showerror("Access Denied", "Incorrect master password. Access denied.")
         return False
 
+
 # Function to prompt for master password
 def prompt_master_password():
     if not verify_master_password():
         root.destroy()
 
+
 # Function definitions for your password manager
 
 def write_key():
@@ -27,6 +43,7 @@
     with open("key.key", "wb") as key_file:
         key_file.write(key)
 
+
 def load_key():
     if not os.path.exists("key.key"):
         write_key()
@@ -34,13 +51,16 @@
         key = key_file.read()
     return key
 
+
 key = load_key()
 fer = Fernet(key)
 
+
 def add_entry(account, password):
     with open('passwords.txt', 'a') as f:
         f.write(account + "|" + fer.encrypt(password.encode()).decode() + "\n")
 
+
 def view_entries():
     entries_list = []
     try:
@@ -55,6 +75,7 @@
         print("No passwords stored yet.")
         return []
 
+
 # Tkinter functions
 
 def add_password():
@@ -63,6 +84,7 @@
     add_entry(account, password)
     tk.messagebox.showinfo("Info", "Password added successfully!")
 
+
 def view_passwords():
     entries = view_entries()
     text.delete('1.0', tk.END)  # Clear the text area
@@ -74,28 +96,42 @@
         except Exception as e:
             text.insert(tk.END, f"Error decrypting password for {user}: {str(e)}\n")
 
+
 # Main Window
 root = tk.Tk()
 root.title("Password Manager")
+root.geometry("1000x800")
 root.configure(bg='black')
 
+# Create a Canvas for the background image
+canvas = tk.Canvas(root)
+canvas.pack(fill="both", expand=True)
+
+# Load the background image
+bg_image = ImageTk.PhotoImage(file="/Users/sergeyakhmerov/Downloads/background.png")  # Replace with your image path
+canvas.create_image(0, 0, image=bg_image, anchor="nw", tags="bg_img")
+canvas.tag_lower("bg_img")  # Ensure the image is behind all other widgets
+
 # Hacker-style font
 hacker_font = font.Font(family="Courier", size=12)
 
 # Add password button
 add_button = tk.Button(root, text="Add New Password", command=add_password, font=hacker_font, fg='green', bg='black')
-add_button.pack()
 
 # View passwords button
 view_button = tk.Button(root, text="View Passwords", command=view_passwords, font=hacker_font, fg='green', bg='black')
-view_button.pack()
 
 # Text area for viewing passwords
 text = tk.Text(root, height=20, width=100, font=hacker_font, fg='green', bg='black')
-text.pack()
 
+# Position widgets on the canvas instead of packing them
+canvas.create_window((root.winfo_screenwidth() / 2, 50), window=add_button, anchor="n")
+canvas.create_window((root.winfo_screenwidth() / 2, 100), window=view_button, anchor="n")
+canvas.create_window((root.winfo_screenwidth() / 2, 150), window=text, anchor="n")
+
+root.bind("<Configure>", resize_bg_image)
 # Prompt for master password on startup
 root.after(100, prompt_master_password)
 
 # Start the GUI event loop
-root.mainloop()
\ No newline at end of file
+root.mainloop()
